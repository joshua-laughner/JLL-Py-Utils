import hashlib
import os

from typing import Callable, Dict, Optional, Tuple

_default_alg = 'md5'
_algs_by_length = {32: 'md5',
                   40: 'sha1',
                   56: 'sha224',
                   64: 'sha256',
                   96: 'sha384',
                   128: 'sha512'}


def _guess_algorithm(checksum):
    n = len(checksum)
    try:
        return _algs_by_length[n]
    except KeyError:
        raise KeyError(f'Cannot infer an algorithm for a hash with {n} characters')


def get_checksum(target_file: os.PathLike, algorithm: str) -> str:
    """Compute the checksum for the given file.

    Parameters
    ----------
    target_file
        File for which to compute the checksum

    algorithm
        Which hashing algorithm to use. Must be an algorithm defined in :mod:`hashlib`.

    Returns
    -------
    digest
        The checksum as a hexadecimal string
    """
    file_hash = getattr(hashlib, algorithm)()
    with open(target_file, 'rb') as robj:
        file_hash.update(robj.read())

    return file_hash.hexdigest()


def compare_checksum(target_file: os.PathLike, given_checksum: str, algorithm: Optional[str] = None) -> Tuple[bool, str]:
    """Check if a given file has the given checksum

    Parameters
    ----------
    target_file
        File for which to compute the checksum

    given_checksum
        The expected checksum for the file, as a hexadecimal string.

    algorithm
        Which hashing algorithm to use. Must be an algorithm defined in :mod:`hashlib`.
        If omitted, it will attempt to be inferred from the length of ``given_checksum``.

    Returns
    -------
    matches
        True if the file's checksum matches the expected value, false otherwise.

    computed_checksum
        The checksum computed for the file.
    """
    algorithm = algorithm or _guess_algorithm(given_checksum)
    file_hash = getattr(hashlib, algorithm)()
    with open(target_file, 'rb') as robj:
        file_hash.update(robj.read())

    computed_checksum = get_checksum(target_file, algorithm)
    matches = given_checksum == computed_checksum
    return matches, computed_checksum


def compare_checksum_list(list_file: os.PathLike, algorithm: Optional[str] = None, file_name_map_fxn: Optional[Callable[[os.PathLike], os.PathLike]] = None) -> Dict[os.PathLike, Optional[bool]]:
    """Compare checksums from a file as generated by md5sum or a similar program

    Parameters
    ----------
    list_file
        A file containing a list of checksums and file paths, in that order and separated by spaces,
        one per line. This is what you get from redirecting the output of the ``md5sum`` program to
        a file, for example.

    algorithm
        Which hashing algorithm to use. Must be an algorithm defined in :mod:`hashlib`.
        If omitted, it will attempt to be inferred from the length of ``given_checksum``.

    file_name_map_fxn
        If given, must be a function (or other callable) that takes in one of the file paths from
        the ``list_file`` and returns the actual path to the file. This is useful when checking 
        checksums for files in different directories against each other.

    Returns
    -------
    matches
        A dictionary with file names as keys and true, false, or ``None`` as the values. ``None``
        indicates that the file did not exist, while true or false indicate if the checksum matched.
        The keys will be the file paths returned by ``file_name_map_fxn`` if it is given, otherwise,
        they are the paths from ``list_file``.
    """
    matches = dict()
    with open(list_file) as f:
        for line in f:
            checksum, file = line.strip().split()
            if file_name_map_fxn is not None:
                file = file_name_map_fxn(file)
            try:
                matches[file], _ = compare_checksum(file, checksum, algorithm=algorithm)
            except FileNotFoundError:
                matches[file] = None
    return matches
